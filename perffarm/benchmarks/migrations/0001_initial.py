# Generated by Django 3.2.13 on 2023-05-06 13:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('runs', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='BenchmarkType',
            fields=[
                ('benchmark_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('benchmark_type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PgBenchBenchmark',
            fields=[
                ('pgbench_benchmark_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('clients', models.IntegerField(validators=[django.core.validators.MaxValueValidator(50), django.core.validators.MinValueValidator(1)])),
                ('scale', models.IntegerField(validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(1)])),
                ('duration', models.IntegerField(validators=[django.core.validators.MaxValueValidator(10000), django.core.validators.MinValueValidator(1)])),
                ('read_only', models.BooleanField()),
            ],
            options={
                'unique_together': {('clients', 'scale', 'duration', 'read_only')},
            },
        ),
        migrations.CreateModel(
            name='PgBenchResult',
            fields=[
                ('pgbench_result_id', models.AutoField(primary_key=True, serialize=False)),
                ('tps', models.FloatField(validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)])),
                ('mode', models.CharField(max_length=100)),
                ('latency', models.FloatField(validators=[django.core.validators.MaxValueValidator(10000), django.core.validators.MinValueValidator(0)])),
                ('start', models.FloatField()),
                ('end', models.FloatField()),
                ('iteration', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('init', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('benchmark_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='benchmarks.pgbenchbenchmark')),
                ('run_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pgbench_result', to='runs.runinfo')),
            ],
        ),
        migrations.CreateModel(
            name='PgBenchStatement',
            fields=[
                ('pgbench_statement_id', models.AutoField(primary_key=True, serialize=False)),
                ('statement', models.TextField(null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PgStatStatementsQuery',
            fields=[
                ('query_id', models.AutoField(primary_key=True, serialize=False)),
                ('query', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PgStatStatements',
            fields=[
                ('pg_stat_statements_id', models.AutoField(primary_key=True, serialize=False)),
                ('queryid', models.TextField(null=True)),
                ('userid', models.IntegerField(null=True)),
                ('dbid', models.IntegerField(null=True)),
                ('plans', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_plan_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_plan_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_plan_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('mean_plan_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('stddev_plan_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('calls', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_exec_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_exec_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_exec_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('mean_exec_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('stddev_exec_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('rows', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('shared_blks_hit', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('shared_blks_read', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('shared_blks_dirtied', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('shared_blks_written', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('local_blks_hit', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('local_blks_read', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('local_blks_dirtied', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('local_blks_written', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('temp_blks_read', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('temp_blks_written', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('blk_read_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('blk_write_time', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('wal_records', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('wal_fpi', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('wal_bytes', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pg_stat_statements_iteration', to='benchmarks.pgbenchresult')),
                ('query', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pg_stat_statements_query', to='benchmarks.pgstatstatementsquery')),
            ],
        ),
        migrations.CreateModel(
            name='PgBenchRunStatement',
            fields=[
                ('pgbench_run_statement_id', models.AutoField(primary_key=True, serialize=False)),
                ('line_id', models.IntegerField(null=True)),
                ('latency', models.FloatField(null=True, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(0)])),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pgbench_run_statement', to='benchmarks.pgbenchresult')),
                ('result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.pgbenchstatement')),
            ],
        ),
        migrations.CreateModel(
            name='PgBenchLog',
            fields=[
                ('pgbench_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('interval_start', models.DateTimeField(null=True, validators=[validators.ValidateDate])),
                ('num_transactions', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(10000), django.core.validators.MinValueValidator(0)])),
                ('sum_latency', models.BigIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(1000000), django.core.validators.MinValueValidator(0)])),
                ('sum_latency_2', models.BigIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(1000000), django.core.validators.MinValueValidator(0)])),
                ('min_latency', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('max_latency', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pgbench_log', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdVmem',
            fields=[
                ('collectd_vmem_id', models.AutoField(primary_key=True, serialize=False)),
                ('vmpage_number_active_file', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_inactive_file', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_isolated_file', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_active_anon', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_inactive_anon', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_isolated_anon', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_file_pages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_file_hugepages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_file_pmdmapped', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_kernel_stack', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_kernel_misc_reclaimable', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_slab_reclaimable', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_slab_unreclaimable', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_zone_write_pending', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_zone_unevictable', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_zone_active_anon', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_zone_inactive_anon', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_zone_active_file', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_zone_inactive_file', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_foll_pin_acquired', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_foll_pin_released', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_dirty', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_dirty_threshold', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_dirty_background_threshold', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_vmscan_write', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_vmscan_immediate_reclaim', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_anon_pages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_anon_transparent_hugepages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_shmem', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_shmem_hugepages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_shmem_pmdmapped', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_writeback', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_writeback_temp', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_free_pages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_free_cma', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_bounce', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_unevictable', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_page_table_pages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_mapped', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_zspages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_mlock', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_number_unstable', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_action_written', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('vmpage_action_dirtied', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_vmem_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdSwap',
            fields=[
                ('collectd_swap_id', models.AutoField(primary_key=True, serialize=False)),
                ('swap_free', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('swap_used', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('swap_cached', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('swap_io_in', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('swap_io_out', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_swap_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdProcess',
            fields=[
                ('collectd_process_id', models.AutoField(primary_key=True, serialize=False)),
                ('fork_rate', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('ps_state_running', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('ps_state_stopped', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('ps_state_sleeping', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('ps_state_paging', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('ps_state_blocked', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('ps_state_zombies', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_process_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdMemory',
            fields=[
                ('collectd_memory_id', models.AutoField(primary_key=True, serialize=False)),
                ('memory_free', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('memory_used', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('memory_cached', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('memory_buffered', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('memory_slab_recl', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('memory_slab_unrecl', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_memory_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdIpcShm',
            fields=[
                ('collectd_ipc_shm_id', models.AutoField(primary_key=True, serialize=False)),
                ('segments', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('bytes_total', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('bytes_rss', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('bytes_swapped', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_ipc_shm_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdIpcSem',
            fields=[
                ('collectd_ipc_sem_id', models.AutoField(primary_key=True, serialize=False)),
                ('count_total', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('count_arrays', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_ipc_sem_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdIpcMsg',
            fields=[
                ('collectd_ipc_msg_id', models.AutoField(primary_key=True, serialize=False)),
                ('count_space', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('count_queues', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('count_headers', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_ipc_msg_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdDisk',
            fields=[
                ('collectd_disk_id', models.AutoField(primary_key=True, serialize=False)),
                ('disk_octets_read', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_octets_write', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_merged_read', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_merged_write', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_ops_read', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_ops_write', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_io_time_io_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_io_time_weighted_io_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_time_read', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('disk_time_write', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_disk_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdCpu',
            fields=[
                ('collectd_cpu_id', models.AutoField(primary_key=True, serialize=False)),
                ('percent_user', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('percent_system', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('percent_idle', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('percent_wait', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('percent_nice', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('percent_interrupt', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('percent_softirq', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('percent_steal', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_cpu_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
        migrations.CreateModel(
            name='CollectdContextswitch',
            fields=[
                ('collectd_contextswitch_id', models.AutoField(primary_key=True, serialize=False)),
                ('contextswitch', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('epoch', models.FloatField()),
                ('pgbench_result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectd_contextswitch_iteration', to='benchmarks.pgbenchresult')),
            ],
        ),
    ]
